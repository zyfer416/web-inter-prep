{
  "questions": [
    {
      "id": 1,
      "type": "technical",
      "difficulty": "easy",
      "question": "What is the difference between '==' and '===' in JavaScript?",
      "answer": "The '==' operator performs type coercion and compares values after converting them to the same type, while '===' performs strict comparison without type coercion. For example: '5' == 5 returns true, but '5' === 5 returns false because one is a string and the other is a number.",
      "hints": "Think about type conversion. One operator converts types before comparison, the other doesn't.",
      "topic": "javascript",
      "tags": ["javascript", "operators", "comparison"]
    },
    {
      "id": 2,
      "type": "technical",
      "difficulty": "medium",
      "question": "Explain the concept of closures in JavaScript with an example.",
      "answer": "A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function returns. Example:\n\nfunction outerFunction(x) {\n  return function innerFunction(y) {\n    return x + y;\n  };\n}\n\nconst addTen = outerFunction(10);\nconsole.log(addTen(5)); // 15\n\nThe inner function 'remembers' the value of x even after outerFunction has finished executing.",
      "hints": "Think about functions having access to variables from their parent scope, even after the parent function has returned.",
      "topic": "javascript",
      "tags": ["javascript", "closures", "scope"]
    },
    {
      "id": 3,
      "type": "technical",
      "difficulty": "hard",
      "question": "Design a system to handle millions of concurrent users for a social media platform. What are the key components and considerations?",
      "answer": "Key components: 1) Load Balancers (distribute traffic), 2) CDN (cache static content), 3) Microservices architecture, 4) Database sharding/replication, 5) Caching layers (Redis/Memcached), 6) Message queues (Kafka/RabbitMQ), 7) Auto-scaling infrastructure. Considerations: CAP theorem, eventual consistency, horizontal scaling, monitoring, failover mechanisms, and data partitioning strategies.",
      "hints": "Consider scalability patterns: load balancing, caching, database design, and microservices. Think about the CAP theorem.",
      "topic": "system-design",
      "tags": ["system-design", "scalability", "distributed-systems"]
    },
    {
      "id": 4,
      "type": "behavioral",
      "difficulty": "medium",
      "question": "Tell me about a time when you had to work with a difficult team member. How did you handle the situation?",
      "answer": "Use the STAR method: Situation (describe context), Task (your responsibility), Action (specific steps taken), Result (outcome). Focus on: 1) Listening to understand their perspective, 2) Finding common ground, 3) Clear communication, 4) Professional approach, 5) Win-win solutions. Emphasize learning and positive outcomes.",
      "hints": "Use the STAR method (Situation, Task, Action, Result). Focus on collaboration, communication, and positive resolution.",
      "topic": "behavioral",
      "tags": ["teamwork", "conflict-resolution", "communication"]
    },
    {
      "id": 5,
      "type": "technical",
      "difficulty": "easy",
      "question": "What is the time complexity of searching in a balanced binary search tree?",
      "answer": "The time complexity of searching in a balanced binary search tree is O(log n), where n is the number of nodes. This is because at each step, we eliminate half of the remaining nodes by comparing the target value with the current node and moving left or right accordingly.",
      "hints": "Think about how many levels you need to traverse in a balanced tree. Each level eliminates half the possibilities.",
      "topic": "data-structures",
      "tags": ["binary-search-tree", "time-complexity", "algorithms"]
    },
    {
      "id": 6,
      "type": "technical",
      "difficulty": "medium",
      "question": "Explain the differences between SQL and NoSQL databases. When would you use each?",
      "answer": "SQL databases: ACID properties, structured data, complex queries, relationships. Use for: financial systems, e-commerce, data consistency critical. NoSQL databases: flexible schema, horizontal scaling, eventual consistency. Types: Document (MongoDB), Key-value (Redis), Column (Cassandra), Graph (Neo4j). Use for: real-time analytics, content management, IoT data, rapid prototyping.",
      "hints": "Consider ACID properties, scalability, schema flexibility, and consistency requirements.",
      "topic": "databases",
      "tags": ["sql", "nosql", "databases", "scalability"]
    },
    {
      "id": 7,
      "type": "behavioral",
      "difficulty": "easy",
      "question": "Why do you want to work for our company?",
      "answer": "Research the company beforehand. Mention: 1) Specific company values/mission alignment, 2) Products/services you admire, 3) Growth opportunities, 4) Company culture fit, 5) How your skills can contribute. Be genuine and specific. Avoid generic answers about 'great company' - show you've done your homework.",
      "hints": "Research the company's mission, values, and recent achievements. Connect your career goals with what the company offers.",
      "topic": "behavioral",
      "tags": ["motivation", "company-research", "career-goals"]
    },
    {
      "id": 8,
      "type": "technical",
      "difficulty": "hard",
      "question": "Implement a LRU (Least Recently Used) cache with O(1) operations.",
      "answer": "Use a combination of HashMap and Doubly Linked List:\n\nclass LRUCache {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n    this.head = { key: 0, val: 0 };\n    this.tail = { key: 0, val: 0 };\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  get(key) {\n    if (this.cache.has(key)) {\n      const node = this.cache.get(key);\n      this.moveToHead(node);\n      return node.val;\n    }\n    return -1;\n  }\n\n  put(key, value) {\n    if (this.cache.has(key)) {\n      const node = this.cache.get(key);\n      node.val = value;\n      this.moveToHead(node);\n    } else {\n      const newNode = { key, val: value };\n      if (this.cache.size >= this.capacity) {\n        this.removeTail();\n      }\n      this.addToHead(newNode);\n      this.cache.set(key, newNode);\n    }\n  }\n}",
      "hints": "Think about using a hash map for O(1) access and a doubly linked list to maintain order. The head represents most recent, tail represents least recent.",
      "topic": "data-structures",
      "tags": ["lru-cache", "hash-map", "linked-list", "algorithms"]
    },
    {
      "id": 9,
      "type": "behavioral",
      "difficulty": "medium",
      "question": "Describe a time when you had to learn a new technology quickly for a project.",
      "answer": "Use STAR method. Highlight: 1) The urgency and importance of learning, 2) Your learning strategy (documentation, tutorials, practice projects), 3) How you applied it successfully, 4) The positive outcome. Show adaptability, self-motivation, and effective learning techniques. Mention resources used and how you ensured quality despite time constraints.",
      "hints": "Focus on your learning strategy, resources used, and how you ensured quality results despite time pressure.",
      "topic": "behavioral",
      "tags": ["learning-agility", "adaptability", "time-management"]
    },
    {
      "id": 10,
      "type": "technical",
      "difficulty": "easy",
      "question": "What is the difference between a stack and a queue?",
      "answer": "Stack: LIFO (Last In, First Out) data structure. Operations: push (add to top), pop (remove from top), peek (view top). Use cases: function calls, undo operations, expression evaluation. Queue: FIFO (First In, First Out) data structure. Operations: enqueue (add to rear), dequeue (remove from front), front (view front). Use cases: task scheduling, breadth-first search, handling requests.",
      "hints": "Think about the order in which elements are added and removed. One follows LIFO, the other FIFO.",
      "topic": "data-structures",
      "tags": ["stack", "queue", "data-structures", "lifo", "fifo"]
    },
    {
      "id": 11,
      "type": "technical",
      "difficulty": "medium",
      "question": "Explain the concept of database indexing and its trade-offs.",
      "answer": "Database indexing creates a separate structure that points to data in the main table, similar to a book's index. Benefits: Faster query performance (especially SELECT operations), improved WHERE, ORDER BY, and JOIN performance. Trade-offs: Additional storage space, slower INSERT/UPDATE/DELETE operations (index must be updated), maintenance overhead. Types: B-tree (most common), Hash, Bitmap, Partial indexes.",
      "hints": "Think about trade-offs between read and write performance. Indexes speed up reads but slow down writes.",
      "topic": "databases",
      "tags": ["database", "indexing", "performance", "optimization"]
    },
    {
      "id": 12,
      "type": "behavioral",
      "difficulty": "hard",
      "question": "Tell me about a time when you disagreed with your manager's decision. How did you handle it?",
      "answer": "Use STAR method. Show: 1) Respectful disagreement, 2) Data-driven arguments, 3) Professional communication, 4) Willingness to understand their perspective, 5) Commitment to team decision once made. Emphasize: preparation before the conversation, choosing appropriate time/place, focusing on business impact, and maintaining positive relationship regardless of outcome.",
      "hints": "Show respect for authority while demonstrating your analytical thinking. Focus on business impact and professional communication.",
      "topic": "behavioral",
      "tags": ["leadership", "communication", "conflict-management", "professionalism"]
    },
    {
      "id": 13,
      "type": "technical",
      "difficulty": "easy",
      "question": "What is the difference between HTTP and HTTPS?",
      "answer": "HTTP (HyperText Transfer Protocol) is unsecured and transmits data in plain text. HTTPS (HTTP Secure) adds SSL/TLS encryption layer, providing: 1) Data encryption (confidentiality), 2) Data integrity (tampering detection), 3) Authentication (server identity verification). HTTPS uses port 443, HTTP uses port 80. Modern web applications should use HTTPS for security.",
      "hints": "Think about security. One protocol encrypts data, the other doesn't. Consider what 'S' stands for.",
      "topic": "networking",
      "tags": ["http", "https", "security", "encryption", "ssl"]
    },
    {
      "id": 14,
      "type": "technical",
      "difficulty": "hard",
      "question": "Design a URL shortener service like bit.ly. What are the key components and considerations?",
      "answer": "Components: 1) URL encoding/decoding service, 2) Database (NoSQL for scale), 3) Caching layer, 4) Load balancers, 5) Analytics service. Key considerations: Base62 encoding, collision handling, custom URLs, expiration, rate limiting, analytics tracking. Scale: estimate 100:1 read/write ratio, partition by URL hash, use CDN for popular URLs, implement database sharding.",
      "hints": "Consider the encoding algorithm, database design, caching strategy, and how to handle high read/write ratios.",
      "topic": "system-design",
      "tags": ["system-design", "url-shortener", "scalability", "databases"]
    },
    {
      "id": 15,
      "type": "behavioral",
      "difficulty": "easy",
      "question": "What are your greatest strengths?",
      "answer": "Choose 2-3 relevant strengths with specific examples: 1) Technical skills with concrete achievements, 2) Soft skills with workplace examples, 3) Learning ability with recent examples. Structure: State strength → Provide specific example → Explain impact. Align with job requirements. Avoid generic answers like 'hard worker' - be specific and prove with evidence.",
      "hints": "Choose strengths relevant to the role and back them up with specific examples that demonstrate impact.",
      "topic": "behavioral",
      "tags": ["self-assessment", "strengths", "examples", "achievements"]
    }
  ]
}
